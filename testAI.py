import asyncio
from enum import Enum
import httpx

# token = "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"
models = [
    "google/gemma-3-27b-it:free",
    "google/gemma-3-12b-it:free",
    "google/gemma-3-4b-it:free",
    "meta-llama/llama-4-maverick:free",
]
tokens = [
    "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",
    "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",
]


class TimeEnum(Enum):
    two_hour = "2 –≥–æ–¥–∏–Ω–∏"
    fifteen_minutes = "15 —Ö–≤–∏–ª–∏–Ω"


async def generate_reminder(time_left: TimeEnum, student_name: str | None = None):
    i = 0
    model_index = 0
    async with httpx.AsyncClient(timeout=httpx.Timeout(30.0)) as client:
        if time_left.value == TimeEnum.two_hour.value:
            style_hint = (
                "–ú–æ–∂–µ—à –ø–æ—á–∞—Ç–∏ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ü—Ä–∏–≤—ñ—Ç' —á–∏ '–•–µ–π' —á–∏ —â–æ—Å—å), "
                "—â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—Ä—É–∂–Ω—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É."
            )
        elif time_left.value == TimeEnum.fifteen_minutes.value:
            style_hint = (
                "–ù–ï(!) –ø–æ—á–∏–Ω–∞–π –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–¥. –ó—Ä–æ–±–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º —ñ –∫–æ—Ä–æ—Ç–∫–∏–º, "
                "–Ω—ñ–±–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –¥—Ä—É–≥–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º."
            )
        while True:
            try:
                response = await client.post(
                    url="https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {tokens[i]}",
                        "Content-Type": "application/json",
                    },
                    json={
                        "model": f"{models[model_index]}",
                        "messages": [
                            {
                                "role": "system",
                                "content": (
                                    "–¢–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –≤–µ—Å–µ–ª—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ—Ç–µ–π üßí. "
                                    "–ü–æ–≤–µ—Ä—Ç–∞—î—à –ª–∏—à–µ —Ç–µ–∫—Å—Ç —É HTML —Å—Ç–∏–ª—ñ Telegram "
                                    "(<b>, <i>, <code>), –±–µ–∑ markdown —ñ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å. "
                                    "–ü–∏—à–∏ –±–µ–∑ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫, –¥—Ä—É–∂–Ω—ñ–º —Ç–æ–Ω–æ–º —ñ –∑ –µ–º–æ–¥–∑—ñ."
                                ),
                            },
                            {
                                "role": "user",
                                "content": (
                                    f"–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–µ, –≤–µ—Å–µ–ª–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–∏—Ç–∏–Ω–∏ –¥–æ 12 —Ä–æ–∫—ñ–≤ "
                                    f"{f'–Ω–∞ —ñ–º‚Äô—è {student_name} ' if student_name else ''}"
                                    f"–ø—Ä–æ —Ç–µ, —â–æ —É—Ä–æ–∫ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ Python üêç –ø–æ—á–Ω–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ {time_left}. "
                                    "–¢–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–º, –∑ –µ–º–æ–¥–∑—ñ —ñ –æ–¥–Ω–∏–º –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–∏–º —Ä—è–¥–∫–æ–º Python-–∫–æ–¥—É "
                                    "–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–µ–≥—É <code>. –ù–µ –ø–∏—à–∏ –ø—Ä–æ HTML –∞–±–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è."
                                    f"{style_hint}"
                                ),
                            },
                        ],
                    },
                )
                data = response.json()
                print(response.raise_for_status())
                if response.status_code == 200:
                    text = data["choices"][0]["message"]["content"]
                    print(
                        f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ({time_left.value}):\n{text}\n",
                        "**",
                        i,
                        models[model_index],
                    )
                    return text
            except httpx.HTTPStatusError as e:
                if e.response.status_code == 429:
                    if i == len(tokens) - 1:
                        i = 0
                        model_index += 1
                    else:
                        i += 1
                elif e.response.status_code == 400:
                    model_index += 1
                await asyncio.sleep(1)
            except (httpx.ReadTimeout, httpx.ConnectTimeout):
                await asyncio.sleep(5)
            if model_index == len(models) - 1 and i == len(tokens) - 1:
                break
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenRouter.")
        return


async def main():
    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 2 –≥–æ–¥–∏–Ω–∏
    await generate_reminder(TimeEnum.two_hour, "–î–∞–≤–∏–¥")

    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω
    # await generate_reminder(TimeEnum.fifteen_minutes, "–î–∞–≤–∏–¥")


# async def check():
#     async with httpx.AsyncClient(timeout=httpx.Timeout(30.0)) as client:
#         response = await client.get(
#             url="https://openrouter.ai/api/v1/key",
#             headers={
#                 "Authorization": f"Bearer {tokens[0]}",
#                 "Content-Type": "application/json",
#             },
#         )
#         print(response)
#         print(response.json())


if __name__ == "__main__":
    asyncio.run(
        generate_reminder(time_left=TimeEnum.fifteen_minutes, student_name="–î–∞–≤–∏–¥")
    )
